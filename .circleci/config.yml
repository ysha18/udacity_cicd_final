version: 2.1

orbs:
  slack: circleci/slack@4.4.2

# commands:
#   destroy_environment:
#     steps:
#       - run:
#           name: Destroy env
#           command: |
#             aws cloudformation delete-stack --stack-name frontend-stack-9871051234349703
#             aws cloudformation delete-stack --stack-name backend-stack-9871051234349703

jobs:

 # FRONTEND    

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm install --global webpack
            sudo npm install --global webpack-cli
            sudo webpack --mode development --progress
      - slack/notify:
          event: fail
          mentions: '@shayunited21'
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build     

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:  
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            sudo npm install --global jest
            sudo jest
      - slack/notify:
          event: fail
          mentions: '@shayunited21'
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan for vulnerabilities for frontend
          command: |
            cd frontend
            npm i
            sudo npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          mentions: '@shayunited21'
          template: basic_fail_1

# BACKEND

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             sudo npm i
             sudo npm install typescript -g
             sudo tsc
      - slack/notify:
          event: fail
          mentions: '@shayunited21'
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            sudo npm install --global jest
            sudo jest --runInBand
      - slack/notify:
          event: fail
          mentions: '@shayunited21'
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan for vulnerabilities for backend
          command: |
            cd backend
            sudo npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          mentions: '@shayunited21'
          template: basic_fail_1

# INFRA

  deploy-infrastructure:
    docker:
      - image: garland/aws-cli-docker
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            mkdir /tmp/workspace
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=project-9871051234349703 \
              --stack-name backend-stack-9871051234349703 \
              --parameter-overrides ID=9871051234349703  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=project-9871051234349703 \
              --stack-name frontend-stack-9871051234349703 \
              --parameter-overrides ID=9871051234349703
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - run:
          name: destroy env
          command: |
            aws cloudformation delete-stack --stack-name backend-stack-9871051234349703
            aws cloudformation delete-stack --stack-name frontend-stack-9871051234349703
          when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "0c:c8:86:0a:a8:63:2c:f2:29:72:bd:69:b4:7e:29:3a"
      # attach workspace
      - attach_workspace:
          at: /tmp/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server/configure-server.yml -i /tmp/inventory.txt
      # Here's where you will add some code to rollback on failure     
      - run:
          name: destroy env
          command: |
            set -ex
            apk add curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            aws cloudformation delete-stack --stack-name backend-stack-9871051234349703
            aws cloudformation delete-stack --stack-name frontend-stack-9871051234349703
          when: on_fail

  
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - test-frontend
      # - scan-backend:
      #     requires:
      #       - test-backend
      - deploy-infrastructure
          # requires:
          #   - scan-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
        
     