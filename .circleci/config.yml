version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  notify_on_slack:
    steps:
      - slack/notify:
          event: fail
          mentions: '@shayunited21'
          template: basic_fail_1
  destroy_environment:
    steps:
      - run:
          name: Destroy env
          when: on_fail
          command: |
            set -ex
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            aws cloudformation delete-stack --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name backend-stack-${CIRCLE_WORKFLOW_ID}

  revert_migrations:
    steps:
      - run:
          name: Revert migration
          when: on_fail
          working_directory: ./frontend
          command: |
            set -ex
            export IS_MIGR_SUCCESS=$(curl -H "token: 6fba3369-5f48-48a3-af00-1f792a55da7e" --request GET https://api.memstash.io/values/migration)
            if $IS_MIGR_SUCCESS == 'success'
            then
              echo "Reverting migration"
              npm run migrations:revert
            fi



jobs:

 # FRONTEND    

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            set -ex
            npm i
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build     
      - notify_on_slack

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:  
          keys: [frontend-build]
      - run:
          name: Test frontend
          working_directory: ./frontend
          command: |
            set -ex
            sudo npm run test
      - notify_on_slack

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan for vulnerabilities for frontend
          working_directory: ./frontend
          command: |
            set -ex
            npm i
            sudo npm audit fix --audit-level=critical --force
      - notify_on_slack

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:  
          keys: [frontend-build]
      - run:
          name: Install AWS CLI dependencies
          command: |
            set -ex
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install dependencies
          working_directory: ./frontend
          command: |
            set -ex
            npm i
      - attach_workspace:
          at: /tmp/
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            set -ex
            export BACKEND_IP=$(curl -H "token: 6fba3369-5f48-48a3-af00-1f792a55da7e" --request GET https://api.memstash.io/values/backend_ip)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
             set -ex
             npm run build
             sudo chmod -R 777 ./dist
             aws s3 cp  ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      - notify_on_slack     
      - destroy_environment

# BACKEND

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
             set -ex
             sudo npm i
             sudo npm run build
             sudo cp package.json dist/
      - persist_to_workspace:
          root: ./backend
          paths:
            - dist
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_slack

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          working_directory: ./backend
          command: |
            set -ex
            npm i
            npm run test
      - notify_on_slack

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan for vulnerabilities for backend
          working_directory: ./backend
          command: |
            set -ex
            sudo npm audit fix --audit-level=critical --force
      - notify_on_slack

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints:
            - "0c:c8:86:0a:a8:63:2c:f2:29:72:bd:69:b4:7e:29:3a"
      - attach_workspace:
          at: /tmp/
      - run:
          name: Install dependencies
          command: |
            set -ex
            apk add --update ansible curl nodejs npm
            pip3 install --upgrade pip
            pip3 install awscli

      - run:
          name: Deploy backend
          working_directory: .circleci/ansible/deploy-backend
          command: |
            set -ex
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook deploy-backend.yml -i /tmp/inventory.txt
      # - notify_on_slack
      # - destroy_environment

# INFRA

  deploy-infrastructure:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: |
            set -ex
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            set -ex
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=project-${CIRCLE_WORKFLOW_ID} \
              --stack-name backend-stack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            set -ex
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=project-${CIRCLE_WORKFLOW_ID} \
              --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            set -ex
            backend_ip=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            echo "$backend_ip" >> .circleci/ansible/inventory.txt

            curl -H "Content-Type: text/plain" -H "token: 6fba3369-5f48-48a3-af00-1f792a55da7e" --request PUT --data "$backend_ip" https://api.memstash.io/values/backend_ip
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - notify_on_slack
      - destroy_environment


  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "0c:c8:86:0a:a8:63:2c:f2:29:72:bd:69:b4:7e:29:3a"
      - attach_workspace:
          at: /tmp/
      - run:
          name: Install dependencies
          command: |
            set -ex
            apk update
            apk upgrade
            apk add --update ansible curl nodejs npm
            pip3 install --upgrade pip
            pip3 install awscli
            
      - run:
          name: Configure server
          working_directory: .circleci/ansible/configure-server
          command: |
            ansible-playbook configure-server.yml -i /tmp/inventory.txt
      # - notify_on_slack    
      # - destroy_environment


# MIGRATIONS

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          command: |
            set -ex
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations and send results to memstash
          working_directory: ./backend
          command: |
            set -ex
            env
            npm run migrations > migration-log.txt
            cat migration-log.txt
            if grep -i "has been executed successfully" migration-log.txt
            then
              echo "sending migration results to memstash"
              curl -H "Content-Type: text/plain" -H "token: 6fba3369-5f48-48a3-af00-1f792a55da7e" --request PUT --data "success" https://api.memstash.io/values/migration
            else
              echo "migration not successful"
            fi
      - notify_on_slack
      - destroy_environment


# SMOKE TEST

  smoke-test:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            set -ex
            sudo apt-get update
            sudo apt-get install curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url and smoke test
          command: |
            set -ex
            export BACKEND_IP=$(curl -H "token: 6fba3369-5f48-48a3-af00-1f792a55da7e" --request GET https://api.memstash.io/values/backend_ip)
            export API_URL="https://${BACKEND_IP}:3030"
            curl ${API_URL}/api/status
      - run:
          name: Frontend smoke test.
          command: |
            set -ex
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi

      # - notify_on_slack
      # - destroy_environment
      # - revert_migrations
  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - deploy-frontend:
      #     requires: [deploy-backend]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
        
     